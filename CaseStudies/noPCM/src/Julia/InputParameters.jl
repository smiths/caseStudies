module InputParameters

include("Constants.jl")
import .Constants

function get_input(filename::String)
    infile = open(filename, "r")
    readline(infile)
    A_C = parse(Float64, readline(infile))
    readline(infile)
    C_W = parse(Float64, readline(infile))
    readline(infile)
    h_C = parse(Float64, readline(infile))
    readline(infile)
    T_init = parse(Float64, readline(infile))
    readline(infile)
    t_final = parse(Float64, readline(infile))
    readline(infile)
    L = parse(Float64, readline(infile))
    readline(infile)
    T_C = parse(Float64, readline(infile))
    readline(infile)
    t_step = parse(Float64, readline(infile))
    readline(infile)
    rho_W = parse(Float64, readline(infile))
    readline(infile)
    D = parse(Float64, readline(infile))
    readline(infile)
    A_tol = parse(Float64, readline(infile))
    readline(infile)
    R_tol = parse(Float64, readline(infile))
    readline(infile)
    E_W = parse(Float64, readline(infile))
    close(infile)

    return A_C, C_W, h_C, T_init, t_final, L, T_C, t_step, rho_W, D, A_tol, R_tol, E_W
end

function derived_values(D::Float64, L::Float64)
    V_tank = Constants.PI * (D / 2.0) ^ 2.0 * L

    return V_tank
end

function input_constraints(A_C::Float64, C_W::Float64, h_C::Float64, T_init::Float64, t_final::Float64, L::Float64, T_C::Float64, t_step::Float64, rho_W::Float64, D::Float64, E_W::Float64)
    if !(A_C <= Constants.Constants.A_C_MAX)
        print("Warning: ")
        print("A_C has value ")
        print(A_C)
        print(", but is suggested to be ")
        print("below ")
        print(Constants.Constants.A_C_MAX)
        print(" (A_C_max)")
        println(".")
    end
    if !(Constants.Constants.C_W_MIN < C_W && C_W < Constants.Constants.C_W_MAX)
        print("Warning: ")
        print("C_W has value ")
        print(C_W)
        print(", but is suggested to be ")
        print("between ")
        print(Constants.Constants.C_W_MIN)
        print(" (C_W_min)")
        print(" && ")
        print(Constants.Constants.C_W_MAX)
        print(" (C_W_max)")
        println(".")
    end
    if !(Constants.Constants.H_C_MIN <= h_C && h_C <= Constants.Constants.H_C_MAX)
        print("Warning: ")
        print("h_C has value ")
        print(h_C)
        print(", but is suggested to be ")
        print("between ")
        print(Constants.Constants.H_C_MIN)
        print(" (h_C_min)")
        print(" && ")
        print(Constants.Constants.H_C_MAX)
        print(" (h_C_max)")
        println(".")
    end
    if !(t_final < Constants.Constants.T_FINAL_MAX)
        print("Warning: ")
        print("t_final has value ")
        print(t_final)
        print(", but is suggested to be ")
        print("below ")
        print(Constants.Constants.T_FINAL_MAX)
        print(" (t_final_max)")
        println(".")
    end
    if !(Constants.Constants.L_MIN <= L && L <= Constants.Constants.L_MAX)
        print("Warning: ")
        print("L has value ")
        print(L)
        print(", but is suggested to be ")
        print("between ")
        print(Constants.Constants.L_MIN)
        print(" (L_min)")
        print(" && ")
        print(Constants.Constants.L_MAX)
        print(" (L_max)")
        println(".")
    end
    if !(Constants.Constants.RHO_W_MIN < rho_W && rho_W <= Constants.Constants.RHO_W_MAX)
        print("Warning: ")
        print("rho_W has value ")
        print(rho_W)
        print(", but is suggested to be ")
        print("between ")
        print(Constants.Constants.RHO_W_MIN)
        print(" (rho_W_min)")
        print(" && ")
        print(Constants.Constants.RHO_W_MAX)
        print(" (rho_W_max)")
        println(".")
    end
    if !(Constants.Constants.AR_MIN <= D && D <= Constants.Constants.AR_MAX)
        print("Warning: ")
        print("D has value ")
        print(D)
        print(", but is suggested to be ")
        print("between ")
        print(Constants.Constants.AR_MIN)
        print(" (AR_min)")
        print(" && ")
        print(Constants.Constants.AR_MAX)
        print(" (AR_max)")
        println(".")
    end
    if !(A_C > 0.0)
        print("Warning: ")
        print("A_C has value ")
        print(A_C)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(C_W > 0.0)
        print("Warning: ")
        print("C_W has value ")
        print(C_W)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(h_C > 0.0)
        print("Warning: ")
        print("h_C has value ")
        print(h_C)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(0.0 < T_init && T_init < 100.0)
        print("Warning: ")
        print("T_init has value ")
        print(T_init)
        print(", but is suggested to be ")
        print("between ")
        print(0.0)
        print(" && ")
        print(100.0)
        println(".")
    end
    if !(t_final > 0.0)
        print("Warning: ")
        print("t_final has value ")
        print(t_final)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(L > 0.0)
        print("Warning: ")
        print("L has value ")
        print(L)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(0.0 < T_C && T_C < 100.0)
        print("Warning: ")
        print("T_C has value ")
        print(T_C)
        print(", but is suggested to be ")
        print("between ")
        print(0.0)
        print(" && ")
        print(100.0)
        println(".")
    end
    if !(0.0 < t_step && t_step < t_final)
        print("Warning: ")
        print("t_step has value ")
        print(t_step)
        print(", but is suggested to be ")
        print("between ")
        print(0.0)
        print(" && ")
        print(t_final)
        print(" (t_final)")
        println(".")
    end
    if !(rho_W > 0.0)
        print("Warning: ")
        print("rho_W has value ")
        print(rho_W)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(D > 0.0)
        print("Warning: ")
        print("D has value ")
        print(D)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(E_W >= 0.0)
        print("Warning: ")
        print("E_W has value ")
        print(E_W)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
end

end